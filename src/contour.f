      SUBROUTINE GCONTR(Z, NRZ, NX, NY, CV, NCV, ZMAX, BITMAP,
     *                  XMIN,YMIN,DX,DY,DRAW)
C
C     THIS SUBROUTINE DRAWS A CONTOUR THROUGH EQUAL VALUES OF AN ARRAY.
C
C     *****     FORMAL ARGUMENTS     ***********************************
C
C     Z IS THE ARRAY FOR WHICH CONTOURS ARE TO BE DRAWN.  THE ELEMENTS
C     OF Z ARE ASSUMED TO LIE UPON THE NODES OF A TOPOLOGICALLY
C     RECTANGULAR COORDINATE SYSTEM - E.G. CARTESIAN, POLAR (EXCEPT
C     THE ORIGIN), ETC.
C
C     NRZ IS THE NUMBER OF ROWS DECLARED FOR Z IN THE CALLING PROGRAM.
C
C     NX IS THE LIMIT FOR THE FIRST SUBSCRIPT OF Z.
C
C     NY IS THE LIMIT FOR THE SECOND SUBSCRIPT OF Z.
C
C     CV ARE THE VALUES OF THE CONTOURS TO BE DRAWN.
C
C     NCV IS THE NUMBER OF CONTOUR VALUES IN CV.
C
C     ZMAX IS THE MAXIMUM VALUE OF Z FOR CONSIDERATION.  A VALUE OF
C     Z(I,J) GREATER THAN ZMAX IS A SIGNAL THAT THAT POINT AND THE
C     GRID LINE SEGMENTS RADIATING FROM THAT POINT TO IT'S NEIGHBORS
C     ARE TO BE EXCLUDED FROM CONTOURING.
C
C     BITMAP IS A WORK AREA LARGE ENOUGH TO HOLD NX*NY*NCV*2 BITS.
C
C     DRAW IS A USER-PROVIDED SUBROUTINE USED TO DRAW CONTOURS.
C     THE CALLING SEQUENCE FOR DRAW IS:
C
C         CALL DRAW (X,Y,IFLAG)
C         LET NX = INTEGER PART OF X, FX = FRACTIONAL PART OF X.
C         THEN X SHOULD BE INTERPRETED SUCH THAT INCREASES IN NX
C         CORRESPOND TO INCREASES IN THE FIRST SUBSCRIPT OF Z, AND
C         FX IS THE FRACTIONAL DISTANCE FROM THE ABSCISSA CORRESPONDING
C         TO NX TO THE ABSCISSA CORRESPONDING TO NX+1,
C         AND Y SHOULD BE INTERPRETED SIMILARLY FOR THE SECOND
C         SUBSCRIPT OF Z.
C         THE LOW-ORDER DIGIT OF IFLAG WILL HAVE ONE OF THE VALUES:
C             1 - CONTINUE A CONTOUR,
C             2 - START A CONTOUR AT A BOUNDARY,
C             3 - START A CONTOUR NOT AT A BOUNDARY,
C             4 - FINISH A CONTOUR AT A BOUNDARY,
C             5 - FINISH A CLOSED CONTOUR (NOT AT A BOUNDARY).
C                 NOTE THAT REQUESTS 1, 4 AND 5 ARE FOR PEN-DOWN
C                 MOVES, AND THAT REQUESTS 2 AND 3 ARE FOR PEN-UP
C                 MOVES.
C             6 - SET X AND Y TO THE APPROXIMATE 'PEN' POSITION, USING
C                 THE NOTATION DISCUSSED ABOVE.  THIS CALL MAY BE
C                 IGNORED, THE RESULT BEING THAT THE 'PEN' POSITION
C                 IS TAKEN TO CORRESPOND TO Z(1).
C         IFLAG/10 IS THE CONTOUR NUMBER.
C
C     *****     EXTERNAL SUBPROGRAMS     *******************************
C
C     DRAW IS THE USER-SUPPLIED LINE DRAWING SUBPROGRAM DESCRIBED ABOVE.
C     DRAW MAY BE SENSITIVE TO THE HOST COMPUTER AND TO THE PLOT DEVICE.
C
C     ******************************************************************
C
      REAL Z(NRZ, 1), CV(NCV)
      INTEGER BITMAP(NX, NY, NCV, 2)
      INTEGER L1(4), L2(4), IJ(2)
      EXTERNAL DRAW
C
C     L1 AND L2 CONTAIN LIMITS USED DURING THE SPIRAL SEARCH FOR THE
C     BEGINNING OF A CONTOUR.
C     IJ STORES SUBCRIPTS USED DURING THE SPIRAL SEARCH.
C
      INTEGER I1(2), I2(2), I3(6)
C
C     I1, I2 AND I3 ARE USED FOR SUBSCRIPT COMPUTATIONS DURING THE
C     EXAMINATION OF LINES FROM Z(I,J) TO IT'S NEIGHBORS.
C
      REAL XINT(4)
C
C     XINT IS USED TO MARK INTERSECTIONS OF THE CONTOUR UNDER
C     CONSIDERATION WITH THE EDGES OF THE CELL BEING EXAMINED.
C
      REAL XY(2)
C
C     XY IS USED TO COMPUTE COORDINATES FOR THE DRAW SUBROUTINE.
C
      EQUIVALENCE (L2(1),IMAX), (L2(2),JMAX), (L2(3),IMIN),
     *  (L2(4),JMIN)
      EQUIVALENCE (IJ(1),I), (IJ(2),J)
      EQUIVALENCE (XY(1),X), (XY(2),Y)
C
      DATA L1(3) /-1/, L1(4) /-1/
      DATA I1 /1,0/, I2 /1,-1/, I3 /1,0,0,1,1,0/
C
      L1(1) = NX
      L1(2) = NY
      DMAX = ZMAX
C
C     SET THE CURRENT PEN POSITION.  THE DEFAULT POSITION CORRESPONDS
C     TO Z(1).
C
      X = 1.0
      Y = 1.0
      ICUR = MAX0(1,MIN0(INT(X),NX))
      JCUR = MAX0(1,MIN0(INT(Y),NY))
C
C     CLEAR THE BITMAP
C
      CALL FILL0(BITMAP(1,1,1,1), NX*NY*NCV*2)
C
C     SEARCH ALONG A RECTANGULAR SPIRAL PATH FOR A LINE SEGMENT HAVING
C     THE FOLLOWING PROPERTIES:
C          1.  THE END POINTS ARE NOT EXCLUDED,
C          2.  NO MARK HAS BEEN RECORDED FOR THE SEGMENT,
C          3.  THE VALUES OF Z AT THE ENDS OF THE SEGMENT ARE SUCH THAT
C              ONE Z IS LESS THAN THE CURRENT CONTOUR VALUE, AND THE
C              OTHER IS GREATER THAN OR EQUAL TO THE CURRENT CONTOUR
C              VALUE.
C
C     SEARCH ALL BOUNDARIES FIRST, THEN SEARCH INTERIOR LINE SEGMENTS.
C     NOTE THAT THE INTERIOR LINE SEGMENTS NEAR EXCLUDED POINTS MAY BE
C     BOUNDARIES.
C
      IBKEY = 0
   10 I = ICUR
      J = JCUR
   20 IMAX = I
      IMIN = -I
      JMAX = J
      JMIN = -J
      IDIR = 0
C     DIRECTION ZERO IS +I, 1 IS +J, 2 IS -I, 3 IS -J.
   30 NXIDIR = IDIR + 1
      K = NXIDIR
      IF (NXIDIR.GT.3) NXIDIR = 0
   40 I = IABS(I)
      J = IABS(J)
      IF (Z(I,J).GT.DMAX) GO TO 140
      L = 1
C     L=1 MEANS HORIZONTAL LINE, L=2 MEANS VERTICAL LINE.
   50 IF (IJ(L).GE.L1(L)) GO TO 130
      II = I + I1(L)
      JJ = J + I1(3-L)
      IF (Z(II,JJ).GT.DMAX) GO TO 130
      JUMP = 100
C     THE NEXT 15 STATEMENTS (OR SO) DETECT BOUNDARIES.
   60 IX = 1
      IF (IJ(3-L).EQ.1) GO TO 80
      II = I - I1(3-L)
      JJ = J - I1(L)
      IF (Z(II,JJ).GT.DMAX) GO TO 70
      II = I + I2(L)
      JJ = J + I2(3-L)
      IF (Z(II,JJ).LT.DMAX) IX = 0
   70 IF (IJ(3-L).GE.L1(3-L)) GO TO 90
   80 II = I + I1(3-L)
      JJ = J + I1(L)
      IF (Z(II,JJ).GT.DMAX) GO TO 90
      IF (Z(I+1,J+1).LT.DMAX) GO TO 100
   90 IX = IX + 2
  100 IF (JUMP.EQ.280) GO TO 280
      IF (IX.EQ.3) GO TO 130
      IF (IX+IBKEY.EQ.0) GO TO 130
C     NOW DETERMINE WHETHER THE LINE SEGMENT IS CROSSED BY THE CONTOUR.
      II = I + I1(L)
      JJ = J + I1(3-L)
      Z1 = Z(I,J)
      Z2 = Z(II,JJ)
      DO 120 ICV=1,NCV
        IF (BITMAP(I,J,ICV,L).NE.0) GO TO 120
        IF (CV(ICV).LE.AMIN1(Z1,Z2)) GO TO 110
        IF (CV(ICV).LE.AMAX1(Z1,Z2)) GO TO 190
  110   BITMAP(I,J,ICV,L) = 1
  120 CONTINUE
  130 L = L + 1
      IF (L.LE.2) GO TO 50
  140 L = MOD(IDIR,2) + 1
      IJ(L) = IABS(IJ(L))*(IABS(L1(K))/L1(K))
C
C     LINES FROM Z(I,J) TO Z(I+1,J) AND Z(I,J+1)
C     ARE NOT SATISFACTORY CONTINUE THE SPIRAL.
C
  150 IF (IJ(L).GE.L1(K)) GO TO 170
      IJ(L) = IJ(L) + 1
      IF (IJ(L).GT.L2(K)) GO TO 160
      GO TO 40
  160 L2(K) = IJ(L)
      IDIR = NXIDIR
      GO TO 30
  170 IF (IDIR.EQ.NXIDIR) GO TO 180
      NXIDIR = NXIDIR + 1
      IJ(L) = L1(K)
      K = NXIDIR
      L = 3 - L
      IJ(L) = L2(K)
      IF (NXIDIR.GT.3) NXIDIR = 0
      GO TO 150
  180 IF (IBKEY.NE.0) RETURN
      IBKEY = 1
      GO TO 10
C
C     AN ACCEPTABLE LINE SEGMENT HAS BEEN FOUND.
C     FOLLOW THE CONTOUR UNTIL IT EITHER HITS A BOUNDARY OR CLOSES.
C
  190 IEDGE = L
      CVAL = CV(ICV)
      IF (IX.NE.1) IEDGE = IEDGE + 2
      IFLAG = 2 + IBKEY
      XINT(IEDGE) = (CVAL-Z1)/(Z2-Z1)
  200 XY(L) = FLOAT(IJ(L)) + XINT(IEDGE)
      XY(3-L) = FLOAT(IJ(3-L))
      BITMAP(I,J,ICV,L) = 1
      CALL DRAW(XMIN+(X-1.0)*DX, YMIN+(Y-1.0)*DY, CVAL, IFLAG+10*ICV)
      IF (IFLAG.LT.4) GO TO 210
      ICUR = I
      JCUR = J
      GO TO 20
C
C     CONTINUE A CONTOUR.  THE EDGES ARE NUMBERED CLOCKWISE WITH
C     THE BOTTOM EDGE BEING EDGE NUMBER ONE.
C
  210 NI = 1
      IF (IEDGE.LT.3) GO TO 220
      I = I - I3(IEDGE)
      J = J - I3(IEDGE+2)
  220 DO 250 K=1,4
        IF (K.EQ.IEDGE) GO TO 250
        II = I + I3(K)
        JJ = J + I3(K+1)
        Z1 = Z(II,JJ)
        II = I + I3(K+1)
        JJ = J + I3(K+2)
        Z2 = Z(II,JJ)
        IF (CVAL.LE.AMIN1(Z1,Z2)) GO TO 250
        IF (CVAL.GT.AMAX1(Z1,Z2)) GO TO 250
        IF (K.EQ.1) GO TO 230
        IF (K.NE.4) GO TO 240
  230   ZZ = Z1
        Z1 = Z2
        Z2 = ZZ
  240   XINT(K) = (CVAL-Z1)/(Z2-Z1)
        NI = NI + 1
        KS = K
  250 CONTINUE
      IF (NI.EQ.2) GO TO 260
C
C     THE CONTOUR CROSSES ALL FOUR EDGES OF THE CELL BEING EXAMINED.
C     CHOOSE THE LINES TOP-TO-LEFT AND BOTTOM-TO-RIGHT IF THE
C     INTERPOLATION POINT ON THE TOP EDGE IS LESS THAN THE INTERPOLATION
C     POINT ON THE BOTTOM EDGE.  OTHERWISE, CHOOSE THE OTHER PAIR.  THIS
C     METHOD PRODUCES THE SAME RESULTS IF THE AXES ARE REVERSED.  THE
C     CONTOUR MAY CLOSE AT ANY EDGE, BUT MUST NOT CROSS ITSELF INSIDE
C     ANY CELL.
C
      KS = 5 - IEDGE
      IF (XINT(3).LT.XINT(1)) GO TO 260
      KS = 3 - IEDGE
      IF (KS.LE.0) KS = KS + 4
C
C     DETERMINE WHETHER THE CONTOUR WILL CLOSE OR RUN INTO A BOUNDARY
C     AT EDGE KS OF THE CURRENT CELL.
C
  260 L = KS
      IFLAG = 1
      JUMP = 280
      IF (KS.LT.3) GO TO 270
      I = I + I3(KS)
      J = J + I3(KS+2)
      L = KS - 2
  270 IF (BITMAP(I,J,ICV,L).EQ.0) GO TO 60
      IFLAG = 5
      GO TO 290
  280 IF (IX.NE.0) IFLAG = 4
  290 IEDGE = KS + 2
      IF (IEDGE.GT.4) IEDGE = IEDGE - 4
      XINT(IEDGE) = XINT(KS)
      GO TO 200
C
      END
